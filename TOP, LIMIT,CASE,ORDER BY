###### n-th value, but not the n-th smallest
## limit n, only show first n
## limit n, m  shows n+1 to n+m records
Select 
ifnull ((Select Distinct Salary
From Employee
Order by Salary Desc
Limit 1, 1), null) AS SecondHighestSalary;

### the first one
SELECT PRO_NAME, PRO_PRICE
FROM item_mast
ORDER BY PRO_PRICE 
LIMIT 1;

#### the cheapest 
SELECT pro_name, pro_price
   FROM item_mast
   WHERE pro_price = 
    (SELECT MIN(pro_price) FROM item_mast);

#### ORDER by subject and winner, with 'Economics', 'Chemistry' at bottom
SELECT *
FROM nobel_win 
WHERE YEAR =1970
ORDER BY 
  CASE 
    WHEN SUBJECT IN ('Economics', 'Chemistry') THEN 1
    ELSE 0
  END ASC , subject, Winner;
  
  
 ################# ORDER BY ############# 
 Write a SQL statement to make a report with customer ID in such a manner that, 
 the largest number of orders booked by the customer will come first along with their highest purchase amount.

Sample table: orders
ord_no      purch_amt   ord_date    customer_id  salesman_id
----------  ----------  ----------  -----------  -----------
70001       150.5       2012-10-05  3005         5002
70009       270.65      2012-09-10  3001         5005
70002       65.26       2012-10-05  3002         5001
70004       110.5       2012-08-17  3009         5003
70007       948.5       2012-09-10  3005         5002
70005       2400.6      2012-07-27  3007         5001
70008       5760        2012-09-10  3002         5001
70010       1983.43     2012-10-10  3004         5006
70003       2480.4      2012-10-10  3009         5003
70012       250.45      2012-06-27  3008         5002
70011       75.29       2012-08-17  3003         5007
70013       3045.6      2012-04-25  3002         5001

Sample Solution:
SELECT customer_id, COUNT(DISTINCT ord_no), 
MAX(purch_amt) 
FROM orders 
GROUP BY customer_id 
ORDER BY 2 DESC;
